// [PackageDev] target_format: plist, ext: tmLanguage
    { "name": "Witcher Script",
  "scopeName": "source.ws",
  "fileTypes": [""],
  "uuid": "4e75581f-2727-416d-a72f-a98b8f70be3a",

  "patterns": [
    {
    	"begin": "\/\\*",
    	"end": "\\*\/",
    	"name": "comment.block.ws"
    },
    {
    	"match": "\/\/.*",
    	"name": "comment.double-slash.ws"
    },
    {
        "match": "(:)\\s*((array)\\s*<(\\s*.*\\s*)>\\s*)?(\\w*)?",
        "captures": {
            "3": {"name": "support.function.ws"},
            "4": {"name": "support.type.ws"},
            "5": {"name": "support.class.ws"}
        }
    },
    {
        "match": "",
        "captures": {
            "1": {"name": "support.function.ws"},
            "2": {"name": "support.class.ws"}
        }
    },
    {
    	"match": "\\b(import|quest|editable|autobind|hint|latent|timer|entry|statemachine|exec|continue|if|else|private|public|abstract|protected|final|const|default|out|return|switch|case|break|optional|while|for|saved)\\b",
    	"name": "keyword.ws"
    },
    {
    	"match": "(extends)\\s*(\\w*)",
    	"captures": {
    		"1": {"name": "keyword.ws"},
    		"2": {"name": "entity.other.inherited-class.ws"}
    	}
    },
    {
    	"match": "\\b([0-9]*(\\.)?(f)?)\\b",
    	"name": "constant.numeric.ws"
    },
    {
    	"match": "\\b(true|false|NULL|null)\\b",
    	"name": "constant.language.ws"
    },
    {
    	"match": "\\w*(\\.)",
    	"captures": {
    		"1": {"name": "keyword.operator.ws"}
    	},
    	"name": "support.class.ws"
    },
    {
    	"match": "=|!|<|>|\\||&|\\+|-|\\*|\/",
    	"name": "keyword.operator.ws"
    },
    {
    	"match": "(var)\\s+\\w*(((,)\\s*\\w*)+)?",
    	"captures": {
    		"1": {"name": "support.class.ws"}
    	},
    	"name": "variable.other.ws"
    },
    {
        "begin": "(function|event)\\s*(\/\\*.*\\*\/\\s*)?(\\w+)\\s*\\(",
        "beginCaptures": {
            "1": {"name": "support.type.ws"},
            "2": {"name": "comment.block.ws"},
            "3": {"name": "entity.name.function.ws"}
        },
        "end": "\\)",
        "patterns": [
            {
                "match": "\/\\*.*\\*\/",
                "name": "comment.block.ws"
            },
            {
                "match": "out|optional",
                "name": "keyword.ws"
            },
            {
                "match": ":\\s*((array)<(\\s*\\w*\\s*)>|(\\w*))",
                "captures": {
                    "2": {"name": "support.function.ws"},
                    "3": {"name": "support.class.ws"},
                    "4": {"name": "support.class.ws"}
                }
            },
            {
                "match": "\\w*",
                "name": "variable.parameter.ws"
            }
        ]
    },
    {
        "match": "(enum|state|struct)\\s+\\w+",
        "captures": {
            "1": {"name": "support.type.ws"}
        },
        "name": "entity.name.function.ws"
    },
    {
    	"match": "(class)\\s*(\/\\*.*\\*\/\\s*)?\\s\\w*((\\s+)?(in)\\s+(\\w*))?",
    	"captures": {
    		"1": {"name": "support.type.ws"},
    		"2": {"name": "comment.block.ws"},
    		"5": {"name": "keyword.ws"},
    		"6": {"name": "entity.other.inherited-class.ws"}
    	},
    	"patterns": [
    		{
    			"match": "this",
    			"name": "support.class.ws"
    		}
    	],
    	"name": "entity.name.type.ws"
    },
    {
    	"begin": "\"",
    	"end": "\"",
    	"name": "string.quoted.double.ws"
    },
    {
    	"begin": "'",
    	"end": "'",
    	"name": "string.quoted.single.ws"
    },
    {
    	"match": "(new)\\s+(\\w*)(\\s+(in)\\s+(((\\w*)(\\.))+)?(\\w*))?",
    	"captures": {
    		"1": {"name": "keyword.ws"},
    		"2": {"name": "support.class.ws"},
    		"4": {"name": "keyword.ws"},
            "7": {"name": "support.class.ws"},
            "8": {"name": "keyword.operator.ws"},
            "9": {"name": "entity.other.inherited-class.ws"}
    	}
    },
    {
    	"match": "\\b(string|int|integer|bool|float|function|class|enum|struct)\\b",
    	"name": "support.type.ws"
    },
    {
    	"match": "\\b(this|theGame|theInput|thePlayer|theSound|parent|super)\\b",
    	"name": "support.class.ws"
    },
    {
        "match": "\\((\\s*\\w*\\s*)\\)\\(",
        "captures": {
            "1": {"name": "support.class.ws"}
        }
    },
    {
        "match": "\\((\\s*\\w*\\s*)\\)\\s*(((\\w*)(\\.))*)?((\\bthis\\b)|\\w+)",
        "captures": {
            "1": {"name": "support.class.ws"},
            "4": {"name": "support.class.ws"},
            "5": {"name": "keyword.operator.ws"},
            "7": {"name": "support.class.ws"}
        }
    },
    // String functions (string.ws)
    {
        "match": "(Str(Len|StartsWith|Contains|UpperUTF|LowerUTF|Cmp|Find(First|Last)|Split(First|Last)|ReplaceAll|Replace|Mid|Left|Right|Before(First|Last)|After(First|Last)|BeginsWith|EndsWith|Upper|Lower|Char|ingToInt))\\(",
        "captures": {
            "1": {"name": "support.function.ws"}
        }
    },
    {
        "match": "(NameTo(String|Int|Float)|FloatToString|FloatToStringPrec|IntToString|NoTrailZeros)\\(",
        "captures": {
            "1": {"name": "support.function.ws"}
        }
    },
    // State functions (states.ws)
    {
        "match": "(IsActive|GetStateName|Can(Enter|Leave)State|(Begin|End|Continued|Paused)State)\\(",
        "captures": {
            "1": {"name": "support.function.ws"}
        }
    },
    // Object functions (object.ws)
    {
        "match": "((Push|Pop|Goto|Get|GetCurrent|IsIn)State|GetCurrentSTateName|LockEntryFunction|SetCleanupFunction|DebugDumpEntryFunctionCalls|ToString|LogStates)\\(",
        "captures": {
            "1": {"name": "support.function.ws"}
        }
    },
    // Miscellanious functions (misc.ws)
    {
        "match": "(Log|Uint64ToString|Trace|DebugBrake|Sleep|SleepOneFrame|KillThread|DumpClassHierarchy|EnumGet(Max|Min)|IsNameValid)\\(",
        "captures": {
            "1": {"name": "support.function.ws"}
        }
    },
    // Math functions (math.ws)
    {
        "match": "(EulerAngles|Vector|Rand(Range|Different|F|RangeF|NoiseF)|Pi|Abs|Min|Max|Clamp|Deg2Rad|Rad2Deg|(Abs|Sgn|Mod|Sin|Asin|Cos|Acos|Tan|Atan|Exp|Pow|Log|Sqrt|Sqr|Min|Max|Clamp|Lerp|Ceil|Floor|Round|LerpAngle)F|Angle(Distance|Approach)|CalcSeed|RoundMath|RoundTo|ReinterpretIntAsFLoat|AngleNormalize|AngleNormalize180|NodeToAngleDistance|Vec(Dot2D|Dot|Cross|Length2D|LengthSquared|Length|Normalize2D|Normalize|Rand2D|Rand|Mirror|Distance|DistanceSquared|Distance2D|DistanceSquared2D|DistanceToEdge|NearestPointOnEdge|ToRotation|Heading|FromHeading|TRansform|TransformDir|TransformH|GetAngleBetween|GetAngleDegAroundAxis|ProjectPointPlane|ToString|Interpolate|ToStrinPrec)|Rot(X|Y|Z|Forward|Right|Up|ToMatrix|Axes|Dot|Rand)|Matrix(Identity|Built(Translation|Rotation|Scale|PreScale|TRS|RTS|FromDirectionVector)|Get(Translation|Rotation|Scale|Axis(X|Y|Z)|DirectionVector|Inverted))|SphereIntersect(Ray|Edge)|Int8ToInt|IntToInt8|IntToUint64|Uint64ToInt)\\(",
        "captures": {
            "1": {"name": "support.function.ws"}
        }
    },
    // engineTime functions (engineTime.ws)
    {
        "match": "(EngineTime(FromFloat|ToFloat|ToString))\\(",
        "captures": {
            "1": {"name": "support.function.ws"}
        }
    },
    // Because I am too lazy to include all the log functions from misc.ws
    {
        "match": "(Log\\w*)\\(",
        "captures": {
            "1": {"name": "support.function.ws"}
        }
    },
    // Game functions (game.ws)
    {
        "match": "(IsPaused|IsPausedForReason|IsStopped|IsLoadingScreenVideoPlaying|Pause|PauseCutscenes|UnpauseCutscenes|ExitGame|IsActivelyPaused|SetActivePause|GetEngineTime|GetEngineTimeAsSeconds|(Get|Set|Remove|SetOrRemove|Log)TimeScale|RemoveAllTimeScales|(Set|Get)HoursPerMinute|(Get|Set)DifficultyLevel|(Set|Is)VibrationEnabled|VibrateController|StopVibrateController|GetCurrentVibrationFreq|RemoveSpecificRumble|OverrideRumbleDuration|IsPadConnected|(Get(Entit(y|ies)|Nod(e|es))ByTag)|GetNodesByTags|GetWorld|IsFreeCameraEnabled|EnableFreeCamera|GetFreeCameraPosition|IsShowFlagEnabled|SetShowFlag|PlayCutsceneAsync|IsStreaming|PlayCutscene|Fade(Out|In|OutAsync|InAsync)|IsFading|IsBlackscreen|HasBlackscreenRequested|(Set|Reset)FadeLock|(Unlock|Lock)Achievement|Get(Unlocked|All)Achievements|IsAchievementUnlocked|ToggleUserProfileManagerInputProcessing|IsCheatEnabled|ReloadGameplayConfig|GetGameplay(Choice|Config(Float|Bool|Int|Enum)Value)|SetAIObjectsLooseTime|(Add|Remove)InitialFact|ClearInitialFacts|GetCurrentViewportResolution|SetSingleShotLoadingScreen|RadialBlur(Setup|Disable)|FullscreenBlurSetup)\\(",
        "captures": {
            "1": {"name": "support.function.ws"}
        }
    },
    // Other functions
    {
        "match": "(GetWitcherPlayer|PushBack|PopBack|Resize|Remove|Contains|FindFIrst|FindLast|Size|Clear|Erase|Insert|Last)\\(",
        "captures": {
            "1": {"name": "support.function.ws"}
        }
    }
  ]
}